{"ast":null,"code":"// Function to import all images\nconst importAll = r => {\n  let images = {};\n  r.keys().map((item, index) => {\n    images[item.replace('./', '')] = r(item);\n  });\n  return images;\n};\n\n// Load images from the 'image' directory\nconst images = importAll(require.context('../image/', false, /\\.(png|jpe?g|svg)$/));\nexport default function Allteamdata() {\n  let SHEET_RANGE_TABLE = 'A7:H20';\n  let SHEET_ID = '1s2Lyk37v-hZcg7-_ag8S1Jq3uaeRR8u-oG0zviSc26E';\n  let SHEET_TITLE = 'Sheet4';\n  let FULL_URL_TABLE = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?sheet=${SHEET_TITLE}&range=${SHEET_RANGE_TABLE}`;\n  fetch(FULL_URL_TABLE).then(res => res.text()).then(rep => {\n    let data = JSON.parse(rep.substr(47).slice(0, -2));\n    for (let k = 0; k < 8; k++) {\n      let dataBody = document.getElementById('table-player' + k);\n\n      // Assuming rowData[0] corresponds to the image URL\n      let imageSrc = data.table.rows[2].c[k].v;\n      // Regular expression to extract the ID from the image source URL\n      const regex = /\\/d\\/(.+?)\\/view/;\n\n      // Extract the ID using the regular expression\n      const match = imageSrc.match(regex);\n      const fileId = match[1];\n      // Now you can use this fileId for further operations\n      let imageElement = document.createElement('img');\n      imageElement.src = ` https://drive.google.com/thumbnail?id=${fileId}`;\n      imageElement.classList.add('player-image'); // Add any necessary classes or attributes\n\n      // Append the image to the \"image-logo\" div\n      let imageContainer = dataBody.closest('.box1').querySelector('.image-logo');\n      imageContainer.appendChild(imageElement);\n\n      // For i % 2 == 0\n      for (let i = 3; i < 12; i += 2) {\n        let rowDataOdd = data.table.rows[i].c;\n        let rowDataEven = data.table.rows[i + 1].c; // Accessing the next row's data\n\n        let row = document.createElement('tr');\n\n        // Creating cells for odd and even data\n        let cell1 = document.createElement('td');\n        let cell2 = document.createElement('td');\n        let rank_image = document.createElement('img');\n        rank_image.classList.add('rank-icon');\n        let rankImageFile = rowDataOdd[k].v + '.png'; // Constructing the file name\n        rank_image.src = images[rankImageFile]; // Using the imported images\n        console.log(rank_image.src);\n        cell2.textContent = rowDataEven[k].v; // Assuming the first value to be placed in cell2\n        cell1.append(rank_image);\n        row.appendChild(cell1);\n        row.appendChild(cell2);\n        dataBody.appendChild(row);\n      }\n\n      // Adding text from rowData[0] to the <section class=\"seed\" id=\"seed\">\n      let seedSection = document.getElementById('team' + k);\n      let seedText = document.createElement('p');\n      seedText.textContent = data.table.rows[0].c[k].v; // Assuming rowData[0] contains the text for the <p> element\n      seedSection.appendChild(seedText);\n    }\n  });\n}\n_c = Allteamdata;\nvar _c;\n$RefreshReg$(_c, \"Allteamdata\");","map":{"version":3,"names":["importAll","r","images","keys","map","item","index","replace","require","context","Allteamdata","SHEET_RANGE_TABLE","SHEET_ID","SHEET_TITLE","FULL_URL_TABLE","fetch","then","res","text","rep","data","JSON","parse","substr","slice","k","dataBody","document","getElementById","imageSrc","table","rows","c","v","regex","match","fileId","imageElement","createElement","src","classList","add","imageContainer","closest","querySelector","appendChild","i","rowDataOdd","rowDataEven","row","cell1","cell2","rank_image","rankImageFile","console","log","textContent","append","seedSection","seedText","_c","$RefreshReg$"],"sources":["C:/Users/minht/Documents/GitHub/ValorantTDM/client/src/js/allteamdata.jsx"],"sourcesContent":["// Function to import all images\r\nconst importAll = (r) => {\r\n    let images = {};\r\n    r.keys().map((item, index) => { images[item.replace('./', '')] = r(item); });\r\n    return images;\r\n  };\r\n  \r\n  // Load images from the 'image' directory\r\n  const images = importAll(require.context('../image/', false, /\\.(png|jpe?g|svg)$/));\r\n  \r\n  export default function Allteamdata() {\r\n    let SHEET_RANGE_TABLE = 'A7:H20';\r\n    let SHEET_ID = '1s2Lyk37v-hZcg7-_ag8S1Jq3uaeRR8u-oG0zviSc26E'\r\n    let SHEET_TITLE = 'Sheet4'\r\n    let FULL_URL_TABLE = `https://docs.google.com/spreadsheets/d/${SHEET_ID}/gviz/tq?sheet=${SHEET_TITLE}&range=${SHEET_RANGE_TABLE}`;\r\n  \r\n    fetch(FULL_URL_TABLE)\r\n        .then((res) => res.text())\r\n        .then((rep) => {\r\n            let data = JSON.parse(rep.substr(47).slice(0, -2));\r\n  \r\n            for (let k = 0; k < 8; k++) {\r\n                let dataBody = document.getElementById('table-player' + k);\r\n  \r\n                // Assuming rowData[0] corresponds to the image URL\r\n                let imageSrc = data.table.rows[2].c[k].v;\r\n                // Regular expression to extract the ID from the image source URL\r\n                const regex = /\\/d\\/(.+?)\\/view/;\r\n  \r\n                // Extract the ID using the regular expression\r\n                const match = imageSrc.match(regex);\r\n                const fileId = match[1];\r\n                // Now you can use this fileId for further operations\r\n                let imageElement = document.createElement('img');\r\n                imageElement.src = ` https://drive.google.com/thumbnail?id=${fileId}`;\r\n  \r\n                imageElement.classList.add('player-image'); // Add any necessary classes or attributes\r\n  \r\n                // Append the image to the \"image-logo\" div\r\n                let imageContainer = dataBody.closest('.box1').querySelector('.image-logo');\r\n                imageContainer.appendChild(imageElement);\r\n  \r\n                // For i % 2 == 0\r\n                for (let i = 3; i < 12; i += 2) {\r\n                    let rowDataOdd = data.table.rows[i].c;\r\n                    let rowDataEven = data.table.rows[i + 1].c; // Accessing the next row's data\r\n                \r\n                    let row = document.createElement('tr');\r\n                    \r\n                    // Creating cells for odd and even data\r\n                    let cell1 = document.createElement('td');\r\n                    let cell2 = document.createElement('td');\r\n                    let rank_image = document.createElement('img');\r\n                    rank_image.classList.add('rank-icon');\r\n                    let rankImageFile = rowDataOdd[k].v + '.png'; // Constructing the file name\r\n                    rank_image.src = images[rankImageFile]; // Using the imported images\r\n                    console.log(rank_image.src)\r\n                    cell2.textContent = rowDataEven[k].v; // Assuming the first value to be placed in cell2\r\n                    cell1.append(rank_image);\r\n                    row.appendChild(cell1);\r\n                    row.appendChild(cell2);\r\n                \r\n                    dataBody.appendChild(row);\r\n                }\r\n                \r\n                // Adding text from rowData[0] to the <section class=\"seed\" id=\"seed\">\r\n                let seedSection = document.getElementById('team' + k);\r\n                let seedText = document.createElement('p');\r\n                seedText.textContent = data.table.rows[0].c[k].v; // Assuming rowData[0] contains the text for the <p> element\r\n                seedSection.appendChild(seedText);\r\n            }\r\n        });\r\n  }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}